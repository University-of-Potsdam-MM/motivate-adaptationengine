/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"EXPRESSION":4,"EOF":5,"UNARY_EXPRESSION":6,"LITERAL_EXPRESSION":7,"-":8,"!":9,"MULTIPLICATIVE_EXPRESSION":10,"*":11,"/":12,"%":13,"ADDITIVE_EXPRESSION":14,"+":15,"EXPONENT_EXPRESSION":16,"^":17,"RELATIONAL_EXPRESSION":18,"<":19,">":20,"<=":21,">=":22,"EQUALITY_EXPRESSION":23,"==":24,"===":25,"!=":26,"!==":27,"=~":28,"!=~":29,"IN_EXPRESSION":30,"in":31,"ARRAY_EXPRESSION":32,"notIn":33,"OBJECT_EXPRESSION":34,"AND_EXPRESSION":35,"&&":36,"OR_EXPRESSION":37,"||":38,"ARGUMENT_LIST":39,",":40,"IDENTIFIER_EXPRESSION":41,"IDENTIFIER":42,".":43,"[":44,"STRING_EXPRESSION":45,"]":46,"NUMBER_EXPRESSION":47,"(":48,")":49,"STRING":50,"NUMBER":51,"REGEXP_EXPRESSION":52,"REGEXP":53,"BOOLEAN_EXPRESSION":54,"BOOLEAN":55,"NULL_EXPRESSION":56,"NULL":57,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"-",9:"!",11:"*",12:"/",13:"%",15:"+",17:"^",19:"<",20:">",21:"<=",22:">=",24:"==",25:"===",26:"!=",27:"!==",28:"=~",29:"!=~",31:"in",33:"notIn",36:"&&",38:"||",40:",",42:"IDENTIFIER",43:".",44:"[",46:"]",48:"(",49:")",50:"STRING",51:"NUMBER",53:"REGEXP",55:"BOOLEAN",57:"NULL"},
productions_: [0,[3,2],[6,1],[6,2],[6,2],[10,1],[10,3],[10,3],[10,3],[14,1],[14,3],[14,3],[16,1],[16,3],[18,1],[18,3],[18,3],[18,3],[18,3],[23,1],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[30,1],[30,3],[30,3],[30,3],[30,3],[35,1],[35,3],[37,1],[37,3],[39,1],[39,3],[41,1],[34,1],[34,3],[34,4],[34,4],[34,4],[34,3],[34,4],[45,1],[47,1],[52,1],[54,1],[56,1],[32,2],[32,3],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,3],[4,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return $$[$0-1];
break;
case 3:this.$ = [$$[$0], null, 'unary'];
break;
case 4:this.$ = [$$[$0], null, 'logicalNot'];
break;
case 6:this.$ = [$$[$0-2], $$[$0], 'mult'];
break;
case 7:this.$ = [$$[$0-2], $$[$0], 'div'];
break;
case 8:this.$ = [$$[$0-2], $$[$0], 'mod'];
break;
case 10:this.$ = [$$[$0-2], $$[$0], 'plus'];
break;
case 11:this.$ = [$$[$0-2], $$[$0], 'minus'];
break;
case 13:this.$ = [$$[$0-2], $$[$0], 'pow'];
break;
case 15:this.$ = [$$[$0-2], $$[$0], 'lt'];
break;
case 16:this.$ = [$$[$0-2], $$[$0], 'gt'];
break;
case 17:this.$ = [$$[$0-2], $$[$0], 'lte'];
break;
case 18:this.$ = [$$[$0-2], $$[$0], 'gte'];
break;
case 20:this.$ = [$$[$0-2], $$[$0], 'eq'];
break;
case 21:this.$ = [$$[$0-2], $$[$0], 'seq'];
break;
case 22:this.$ = [$$[$0-2], $$[$0], 'neq'];
break;
case 23:this.$ = [$$[$0-2], $$[$0], 'sneq'];
break;
case 24:this.$ = [$$[$0-2], $$[$0], 'like'];
break;
case 25:this.$ = [$$[$0-2], $$[$0], 'notLike'];
break;
case 27:this.$ = [$$[$0-2], $$[$0], 'in'];
break;
case 28:this.$ = [$$[$0-2], $$[$0], 'notIn'];
break;
case 29:this.$ = [$$[$0-2], $$[$0], 'in'];
break;
case 30:this.$ = [$$[$0-2], $$[$0], 'notIn'];
break;
case 32:this.$ = [$$[$0-2], $$[$0], 'and'];
break;
case 34:this.$ = [$$[$0-2], $$[$0], 'or'];
break;
case 36:this.$ = [$$[$0-2], $$[$0], 'arguments']
break;
case 37:this.$ = [String(yytext), null, 'identifier'];
break;
case 39:this.$ = [$$[$0-2],$$[$0], 'prop'];
break;
case 40:this.$ = [$$[$0-3],$$[$0-1], 'propLookup'];
break;
case 41:this.$ = [$$[$0-3],$$[$0-1], 'propLookup'];
break;
case 42:this.$ = [$$[$0-3],$$[$0-1], 'propLookup'];
break;
case 43:this.$ = [$$[$0-2], [null, null, 'arguments'], 'function']
break;
case 44:this.$ = [$$[$0-3], $$[$0-1], 'function']
break;
case 45:this.$ = [String(yytext.replace(/^['|"]|['|"]$/g, '')), null, 'string'];
break;
case 46:this.$ = [Number(yytext), null, 'number'];
break;
case 47:this.$ = [yytext, null, 'regexp'];
break;
case 48:this.$ = [yytext.replace(/^\s+/, '') == 'true', null, 'boolean'];
break;
case 49:this.$ = [null, null, 'null'];
break;
case 50:this.$ = [null, null, 'array'];
break;
case 51:this.$ = [$$[$0-1], null, 'array'];
break;
case 59:this.$ = [$$[$0-1], null, 'composite']
break;
}
},
table: [{3:1,4:2,6:28,7:7,8:[1,29],9:[1,30],10:27,14:25,16:17,18:8,23:6,30:5,32:15,34:14,35:4,37:3,41:23,42:[1,26],44:[1,24],45:9,47:10,48:[1,16],50:[1,18],51:[1,19],52:11,53:[1,20],54:12,55:[1,21],56:13,57:[1,22]},{1:[3]},{5:[1,31]},{5:[2,60],38:[1,32],49:[2,60]},{5:[2,33],36:[1,33],38:[2,33],49:[2,33]},{5:[2,31],36:[2,31],38:[2,31],49:[2,31]},{5:[2,26],24:[1,34],25:[1,35],26:[1,36],27:[1,37],28:[1,38],29:[1,39],36:[2,26],38:[2,26],49:[2,26]},{5:[2,2],8:[2,2],11:[2,2],12:[2,2],13:[2,2],15:[2,2],17:[2,2],19:[2,2],20:[2,2],21:[2,2],22:[2,2],24:[2,2],25:[2,2],26:[2,2],27:[2,2],28:[2,2],29:[2,2],31:[1,40],33:[1,41],36:[2,2],38:[2,2],49:[2,2]},{5:[2,19],19:[1,42],20:[1,43],21:[1,44],22:[1,45],24:[2,19],25:[2,19],26:[2,19],27:[2,19],28:[2,19],29:[2,19],36:[2,19],38:[2,19],49:[2,19]},{5:[2,52],8:[2,52],11:[2,52],12:[2,52],13:[2,52],15:[2,52],17:[2,52],19:[2,52],20:[2,52],21:[2,52],22:[2,52],24:[2,52],25:[2,52],26:[2,52],27:[2,52],28:[2,52],29:[2,52],31:[2,52],33:[2,52],36:[2,52],38:[2,52],40:[2,52],46:[2,52],49:[2,52]},{5:[2,53],8:[2,53],11:[2,53],12:[2,53],13:[2,53],15:[2,53],17:[2,53],19:[2,53],20:[2,53],21:[2,53],22:[2,53],24:[2,53],25:[2,53],26:[2,53],27:[2,53],28:[2,53],29:[2,53],31:[2,53],33:[2,53],36:[2,53],38:[2,53],40:[2,53],46:[2,53],49:[2,53]},{5:[2,54],8:[2,54],11:[2,54],12:[2,54],13:[2,54],15:[2,54],17:[2,54],19:[2,54],20:[2,54],21:[2,54],22:[2,54],24:[2,54],25:[2,54],26:[2,54],27:[2,54],28:[2,54],29:[2,54],31:[2,54],33:[2,54],36:[2,54],38:[2,54],40:[2,54],46:[2,54],49:[2,54]},{5:[2,55],8:[2,55],11:[2,55],12:[2,55],13:[2,55],15:[2,55],17:[2,55],19:[2,55],20:[2,55],21:[2,55],22:[2,55],24:[2,55],25:[2,55],26:[2,55],27:[2,55],28:[2,55],29:[2,55],31:[2,55],33:[2,55],36:[2,55],38:[2,55],40:[2,55],46:[2,55],49:[2,55]},{5:[2,56],8:[2,56],11:[2,56],12:[2,56],13:[2,56],15:[2,56],17:[2,56],19:[2,56],20:[2,56],21:[2,56],22:[2,56],24:[2,56],25:[2,56],26:[2,56],27:[2,56],28:[2,56],29:[2,56],31:[2,56],33:[2,56],36:[2,56],38:[2,56],40:[2,56],46:[2,56],49:[2,56]},{5:[2,57],8:[2,57],11:[2,57],12:[2,57],13:[2,57],15:[2,57],17:[2,57],19:[2,57],20:[2,57],21:[2,57],22:[2,57],24:[2,57],25:[2,57],26:[2,57],27:[2,57],28:[2,57],29:[2,57],31:[2,57],33:[2,57],36:[2,57],38:[2,57],40:[2,57],43:[1,46],44:[1,47],46:[2,57],48:[1,48],49:[2,57]},{5:[2,58],8:[2,58],11:[2,58],12:[2,58],13:[2,58],15:[2,58],17:[2,58],19:[2,58],20:[2,58],21:[2,58],22:[2,58],24:[2,58],25:[2,58],26:[2,58],27:[2,58],28:[2,58],29:[2,58],31:[2,58],33:[2,58],36:[2,58],38:[2,58],40:[2,58],46:[2,58],49:[2,58]},{4:49,6:28,7:7,8:[1,29],9:[1,30],10:27,14:25,16:17,18:8,23:6,30:5,32:15,34:14,35:4,37:3,41:23,42:[1,26],44:[1,24],45:9,47:10,48:[1,16],50:[1,18],51:[1,19],52:11,53:[1,20],54:12,55:[1,21],56:13,57:[1,22]},{5:[2,14],17:[1,50],19:[2,14],20:[2,14],21:[2,14],22:[2,14],24:[2,14],25:[2,14],26:[2,14],27:[2,14],28:[2,14],29:[2,14],36:[2,14],38:[2,14],49:[2,14]},{5:[2,45],8:[2,45],11:[2,45],12:[2,45],13:[2,45],15:[2,45],17:[2,45],19:[2,45],20:[2,45],21:[2,45],22:[2,45],24:[2,45],25:[2,45],26:[2,45],27:[2,45],28:[2,45],29:[2,45],31:[2,45],33:[2,45],36:[2,45],38:[2,45],40:[2,45],46:[2,45],49:[2,45]},{5:[2,46],8:[2,46],11:[2,46],12:[2,46],13:[2,46],15:[2,46],17:[2,46],19:[2,46],20:[2,46],21:[2,46],22:[2,46],24:[2,46],25:[2,46],26:[2,46],27:[2,46],28:[2,46],29:[2,46],31:[2,46],33:[2,46],36:[2,46],38:[2,46],40:[2,46],46:[2,46],49:[2,46]},{5:[2,47],8:[2,47],11:[2,47],12:[2,47],13:[2,47],15:[2,47],17:[2,47],19:[2,47],20:[2,47],21:[2,47],22:[2,47],24:[2,47],25:[2,47],26:[2,47],27:[2,47],28:[2,47],29:[2,47],31:[2,47],33:[2,47],36:[2,47],38:[2,47],40:[2,47],46:[2,47],49:[2,47]},{5:[2,48],8:[2,48],11:[2,48],12:[2,48],13:[2,48],15:[2,48],17:[2,48],19:[2,48],20:[2,48],21:[2,48],22:[2,48],24:[2,48],25:[2,48],26:[2,48],27:[2,48],28:[2,48],29:[2,48],31:[2,48],33:[2,48],36:[2,48],38:[2,48],40:[2,48],46:[2,48],49:[2,48]},{5:[2,49],8:[2,49],11:[2,49],12:[2,49],13:[2,49],15:[2,49],17:[2,49],19:[2,49],20:[2,49],21:[2,49],22:[2,49],24:[2,49],25:[2,49],26:[2,49],27:[2,49],28:[2,49],29:[2,49],31:[2,49],33:[2,49],36:[2,49],38:[2,49],40:[2,49],46:[2,49],49:[2,49]},{5:[2,38],8:[2,38],11:[2,38],12:[2,38],13:[2,38],15:[2,38],17:[2,38],19:[2,38],20:[2,38],21:[2,38],22:[2,38],24:[2,38],25:[2,38],26:[2,38],27:[2,38],28:[2,38],29:[2,38],31:[2,38],33:[2,38],36:[2,38],38:[2,38],40:[2,38],43:[2,38],44:[2,38],46:[2,38],48:[2,38],49:[2,38]},{7:53,32:15,34:14,39:52,41:23,42:[1,26],44:[1,24],45:9,46:[1,51],47:10,48:[1,16],50:[1,18],51:[1,19],52:11,53:[1,20],54:12,55:[1,21],56:13,57:[1,22]},{5:[2,12],8:[1,55],15:[1,54],17:[2,12],19:[2,12],20:[2,12],21:[2,12],22:[2,12],24:[2,12],25:[2,12],26:[2,12],27:[2,12],28:[2,12],29:[2,12],36:[2,12],38:[2,12],49:[2,12]},{5:[2,37],8:[2,37],11:[2,37],12:[2,37],13:[2,37],15:[2,37],17:[2,37],19:[2,37],20:[2,37],21:[2,37],22:[2,37],24:[2,37],25:[2,37],26:[2,37],27:[2,37],28:[2,37],29:[2,37],31:[2,37],33:[2,37],36:[2,37],38:[2,37],40:[2,37],43:[2,37],44:[2,37],46:[2,37],48:[2,37],49:[2,37]},{5:[2,9],8:[2,9],11:[1,56],12:[1,57],13:[1,58],15:[2,9],17:[2,9],19:[2,9],20:[2,9],21:[2,9],22:[2,9],24:[2,9],25:[2,9],26:[2,9],27:[2,9],28:[2,9],29:[2,9],36:[2,9],38:[2,9],49:[2,9]},{5:[2,5],8:[2,5],11:[2,5],12:[2,5],13:[2,5],15:[2,5],17:[2,5],19:[2,5],20:[2,5],21:[2,5],22:[2,5],24:[2,5],25:[2,5],26:[2,5],27:[2,5],28:[2,5],29:[2,5],36:[2,5],38:[2,5],49:[2,5]},{6:59,7:60,8:[1,29],9:[1,30],32:15,34:14,41:23,42:[1,26],44:[1,24],45:9,47:10,48:[1,16],50:[1,18],51:[1,19],52:11,53:[1,20],54:12,55:[1,21],56:13,57:[1,22]},{6:61,7:60,8:[1,29],9:[1,30],32:15,34:14,41:23,42:[1,26],44:[1,24],45:9,47:10,48:[1,16],50:[1,18],51:[1,19],52:11,53:[1,20],54:12,55:[1,21],56:13,57:[1,22]},{1:[2,1]},{6:28,7:7,8:[1,29],9:[1,30],10:27,14:25,16:17,18:8,23:6,30:5,32:15,34:14,35:62,41:23,42:[1,26],44:[1,24],45:9,47:10,48:[1,16],50:[1,18],51:[1,19],52:11,53:[1,20],54:12,55:[1,21],56:13,57:[1,22]},{6:28,7:7,8:[1,29],9:[1,30],10:27,14:25,16:17,18:8,23:6,30:63,32:15,34:14,41:23,42:[1,26],44:[1,24],45:9,47:10,48:[1,16],50:[1,18],51:[1,19],52:11,53:[1,20],54:12,55:[1,21],56:13,57:[1,22]},{6:28,7:60,8:[1,29],9:[1,30],10:27,14:25,16:17,18:64,32:15,34:14,41:23,42:[1,26],44:[1,24],45:9,47:10,48:[1,16],50:[1,18],51:[1,19],52:11,53:[1,20],54:12,55:[1,21],56:13,57:[1,22]},{6:28,7:60,8:[1,29],9:[1,30],10:27,14:25,16:17,18:65,32:15,34:14,41:23,42:[1,26],44:[1,24],45:9,47:10,48:[1,16],50:[1,18],51:[1,19],52:11,53:[1,20],54:12,55:[1,21],56:13,57:[1,22]},{6:28,7:60,8:[1,29],9:[1,30],10:27,14:25,16:17,18:66,32:15,34:14,41:23,42:[1,26],44:[1,24],45:9,47:10,48:[1,16],50:[1,18],51:[1,19],52:11,53:[1,20],54:12,55:[1,21],56:13,57:[1,22]},{6:28,7:60,8:[1,29],9:[1,30],10:27,14:25,16:17,18:67,32:15,34:14,41:23,42:[1,26],44:[1,24],45:9,47:10,48:[1,16],50:[1,18],51:[1,19],52:11,53:[1,20],54:12,55:[1,21],56:13,57:[1,22]},{6:28,7:60,8:[1,29],9:[1,30],10:27,14:25,16:17,18:68,32:15,34:14,41:23,42:[1,26],44:[1,24],45:9,47:10,48:[1,16],50:[1,18],51:[1,19],52:11,53:[1,20],54:12,55:[1,21],56:13,57:[1,22]},{6:28,7:60,8:[1,29],9:[1,30],10:27,14:25,16:17,18:69,32:15,34:14,41:23,42:[1,26],44:[1,24],45:9,47:10,48:[1,16],50:[1,18],51:[1,19],52:11,53:[1,20],54:12,55:[1,21],56:13,57:[1,22]},{32:70,34:71,41:23,42:[1,26],44:[1,24]},{32:72,34:73,41:23,42:[1,26],44:[1,24]},{6:28,7:60,8:[1,29],9:[1,30],10:27,14:25,16:74,32:15,34:14,41:23,42:[1,26],44:[1,24],45:9,47:10,48:[1,16],50:[1,18],51:[1,19],52:11,53:[1,20],54:12,55:[1,21],56:13,57:[1,22]},{6:28,7:60,8:[1,29],9:[1,30],10:27,14:25,16:75,32:15,34:14,41:23,42:[1,26],44:[1,24],45:9,47:10,48:[1,16],50:[1,18],51:[1,19],52:11,53:[1,20],54:12,55:[1,21],56:13,57:[1,22]},{6:28,7:60,8:[1,29],9:[1,30],10:27,14:25,16:76,32:15,34:14,41:23,42:[1,26],44:[1,24],45:9,47:10,48:[1,16],50:[1,18],51:[1,19],52:11,53:[1,20],54:12,55:[1,21],56:13,57:[1,22]},{6:28,7:60,8:[1,29],9:[1,30],10:27,14:25,16:77,32:15,34:14,41:23,42:[1,26],44:[1,24],45:9,47:10,48:[1,16],50:[1,18],51:[1,19],52:11,53:[1,20],54:12,55:[1,21],56:13,57:[1,22]},{41:78,42:[1,26]},{34:81,41:23,42:[1,26],45:79,47:80,50:[1,18],51:[1,19]},{7:53,32:15,34:14,39:83,41:23,42:[1,26],44:[1,24],45:9,47:10,48:[1,16],49:[1,82],50:[1,18],51:[1,19],52:11,53:[1,20],54:12,55:[1,21],56:13,57:[1,22]},{49:[1,84]},{6:28,7:60,8:[1,29],9:[1,30],10:27,14:85,32:15,34:14,41:23,42:[1,26],44:[1,24],45:9,47:10,48:[1,16],50:[1,18],51:[1,19],52:11,53:[1,20],54:12,55:[1,21],56:13,57:[1,22]},{5:[2,50],8:[2,50],11:[2,50],12:[2,50],13:[2,50],15:[2,50],17:[2,50],19:[2,50],20:[2,50],21:[2,50],22:[2,50],24:[2,50],25:[2,50],26:[2,50],27:[2,50],28:[2,50],29:[2,50],31:[2,50],33:[2,50],36:[2,50],38:[2,50],40:[2,50],46:[2,50],49:[2,50]},{40:[1,87],46:[1,86]},{40:[2,35],46:[2,35],49:[2,35]},{6:28,7:60,8:[1,29],9:[1,30],10:88,32:15,34:14,41:23,42:[1,26],44:[1,24],45:9,47:10,48:[1,16],50:[1,18],51:[1,19],52:11,53:[1,20],54:12,55:[1,21],56:13,57:[1,22]},{6:28,7:60,8:[1,29],9:[1,30],10:89,32:15,34:14,41:23,42:[1,26],44:[1,24],45:9,47:10,48:[1,16],50:[1,18],51:[1,19],52:11,53:[1,20],54:12,55:[1,21],56:13,57:[1,22]},{6:90,7:60,8:[1,29],9:[1,30],32:15,34:14,41:23,42:[1,26],44:[1,24],45:9,47:10,48:[1,16],50:[1,18],51:[1,19],52:11,53:[1,20],54:12,55:[1,21],56:13,57:[1,22]},{6:91,7:60,8:[1,29],9:[1,30],32:15,34:14,41:23,42:[1,26],44:[1,24],45:9,47:10,48:[1,16],50:[1,18],51:[1,19],52:11,53:[1,20],54:12,55:[1,21],56:13,57:[1,22]},{6:92,7:60,8:[1,29],9:[1,30],32:15,34:14,41:23,42:[1,26],44:[1,24],45:9,47:10,48:[1,16],50:[1,18],51:[1,19],52:11,53:[1,20],54:12,55:[1,21],56:13,57:[1,22]},{5:[2,3],8:[2,3],11:[2,3],12:[2,3],13:[2,3],15:[2,3],17:[2,3],19:[2,3],20:[2,3],21:[2,3],22:[2,3],24:[2,3],25:[2,3],26:[2,3],27:[2,3],28:[2,3],29:[2,3],36:[2,3],38:[2,3],49:[2,3]},{5:[2,2],8:[2,2],11:[2,2],12:[2,2],13:[2,2],15:[2,2],17:[2,2],19:[2,2],20:[2,2],21:[2,2],22:[2,2],24:[2,2],25:[2,2],26:[2,2],27:[2,2],28:[2,2],29:[2,2],36:[2,2],38:[2,2],49:[2,2]},{5:[2,4],8:[2,4],11:[2,4],12:[2,4],13:[2,4],15:[2,4],17:[2,4],19:[2,4],20:[2,4],21:[2,4],22:[2,4],24:[2,4],25:[2,4],26:[2,4],27:[2,4],28:[2,4],29:[2,4],36:[2,4],38:[2,4],49:[2,4]},{5:[2,34],36:[1,33],38:[2,34],49:[2,34]},{5:[2,32],36:[2,32],38:[2,32],49:[2,32]},{5:[2,20],19:[1,42],20:[1,43],21:[1,44],22:[1,45],24:[2,20],25:[2,20],26:[2,20],27:[2,20],28:[2,20],29:[2,20],36:[2,20],38:[2,20],49:[2,20]},{5:[2,21],19:[1,42],20:[1,43],21:[1,44],22:[1,45],24:[2,21],25:[2,21],26:[2,21],27:[2,21],28:[2,21],29:[2,21],36:[2,21],38:[2,21],49:[2,21]},{5:[2,22],19:[1,42],20:[1,43],21:[1,44],22:[1,45],24:[2,22],25:[2,22],26:[2,22],27:[2,22],28:[2,22],29:[2,22],36:[2,22],38:[2,22],49:[2,22]},{5:[2,23],19:[1,42],20:[1,43],21:[1,44],22:[1,45],24:[2,23],25:[2,23],26:[2,23],27:[2,23],28:[2,23],29:[2,23],36:[2,23],38:[2,23],49:[2,23]},{5:[2,24],19:[1,42],20:[1,43],21:[1,44],22:[1,45],24:[2,24],25:[2,24],26:[2,24],27:[2,24],28:[2,24],29:[2,24],36:[2,24],38:[2,24],49:[2,24]},{5:[2,25],19:[1,42],20:[1,43],21:[1,44],22:[1,45],24:[2,25],25:[2,25],26:[2,25],27:[2,25],28:[2,25],29:[2,25],36:[2,25],38:[2,25],49:[2,25]},{5:[2,27],36:[2,27],38:[2,27],49:[2,27]},{5:[2,29],36:[2,29],38:[2,29],43:[1,46],44:[1,47],48:[1,48],49:[2,29]},{5:[2,28],36:[2,28],38:[2,28],49:[2,28]},{5:[2,30],36:[2,30],38:[2,30],43:[1,46],44:[1,47],48:[1,48],49:[2,30]},{5:[2,15],17:[1,50],19:[2,15],20:[2,15],21:[2,15],22:[2,15],24:[2,15],25:[2,15],26:[2,15],27:[2,15],28:[2,15],29:[2,15],36:[2,15],38:[2,15],49:[2,15]},{5:[2,16],17:[1,50],19:[2,16],20:[2,16],21:[2,16],22:[2,16],24:[2,16],25:[2,16],26:[2,16],27:[2,16],28:[2,16],29:[2,16],36:[2,16],38:[2,16],49:[2,16]},{5:[2,17],17:[1,50],19:[2,17],20:[2,17],21:[2,17],22:[2,17],24:[2,17],25:[2,17],26:[2,17],27:[2,17],28:[2,17],29:[2,17],36:[2,17],38:[2,17],49:[2,17]},{5:[2,18],17:[1,50],19:[2,18],20:[2,18],21:[2,18],22:[2,18],24:[2,18],25:[2,18],26:[2,18],27:[2,18],28:[2,18],29:[2,18],36:[2,18],38:[2,18],49:[2,18]},{5:[2,39],8:[2,39],11:[2,39],12:[2,39],13:[2,39],15:[2,39],17:[2,39],19:[2,39],20:[2,39],21:[2,39],22:[2,39],24:[2,39],25:[2,39],26:[2,39],27:[2,39],28:[2,39],29:[2,39],31:[2,39],33:[2,39],36:[2,39],38:[2,39],40:[2,39],43:[2,39],44:[2,39],46:[2,39],48:[2,39],49:[2,39]},{46:[1,93]},{46:[1,94]},{43:[1,46],44:[1,47],46:[1,95],48:[1,48]},{5:[2,43],8:[2,43],11:[2,43],12:[2,43],13:[2,43],15:[2,43],17:[2,43],19:[2,43],20:[2,43],21:[2,43],22:[2,43],24:[2,43],25:[2,43],26:[2,43],27:[2,43],28:[2,43],29:[2,43],31:[2,43],33:[2,43],36:[2,43],38:[2,43],40:[2,43],43:[2,43],44:[2,43],46:[2,43],48:[2,43],49:[2,43]},{40:[1,87],49:[1,96]},{5:[2,59],8:[2,59],11:[2,59],12:[2,59],13:[2,59],15:[2,59],17:[2,59],19:[2,59],20:[2,59],21:[2,59],22:[2,59],24:[2,59],25:[2,59],26:[2,59],27:[2,59],28:[2,59],29:[2,59],31:[2,59],33:[2,59],36:[2,59],38:[2,59],40:[2,59],46:[2,59],49:[2,59]},{5:[2,13],8:[1,55],15:[1,54],17:[2,13],19:[2,13],20:[2,13],21:[2,13],22:[2,13],24:[2,13],25:[2,13],26:[2,13],27:[2,13],28:[2,13],29:[2,13],36:[2,13],38:[2,13],49:[2,13]},{5:[2,51],8:[2,51],11:[2,51],12:[2,51],13:[2,51],15:[2,51],17:[2,51],19:[2,51],20:[2,51],21:[2,51],22:[2,51],24:[2,51],25:[2,51],26:[2,51],27:[2,51],28:[2,51],29:[2,51],31:[2,51],33:[2,51],36:[2,51],38:[2,51],40:[2,51],46:[2,51],49:[2,51]},{7:97,32:15,34:14,41:23,42:[1,26],44:[1,24],45:9,47:10,48:[1,16],50:[1,18],51:[1,19],52:11,53:[1,20],54:12,55:[1,21],56:13,57:[1,22]},{5:[2,10],8:[2,10],11:[1,56],12:[1,57],13:[1,58],15:[2,10],17:[2,10],19:[2,10],20:[2,10],21:[2,10],22:[2,10],24:[2,10],25:[2,10],26:[2,10],27:[2,10],28:[2,10],29:[2,10],36:[2,10],38:[2,10],49:[2,10]},{5:[2,11],8:[2,11],11:[1,56],12:[1,57],13:[1,58],15:[2,11],17:[2,11],19:[2,11],20:[2,11],21:[2,11],22:[2,11],24:[2,11],25:[2,11],26:[2,11],27:[2,11],28:[2,11],29:[2,11],36:[2,11],38:[2,11],49:[2,11]},{5:[2,6],8:[2,6],11:[2,6],12:[2,6],13:[2,6],15:[2,6],17:[2,6],19:[2,6],20:[2,6],21:[2,6],22:[2,6],24:[2,6],25:[2,6],26:[2,6],27:[2,6],28:[2,6],29:[2,6],36:[2,6],38:[2,6],49:[2,6]},{5:[2,7],8:[2,7],11:[2,7],12:[2,7],13:[2,7],15:[2,7],17:[2,7],19:[2,7],20:[2,7],21:[2,7],22:[2,7],24:[2,7],25:[2,7],26:[2,7],27:[2,7],28:[2,7],29:[2,7],36:[2,7],38:[2,7],49:[2,7]},{5:[2,8],8:[2,8],11:[2,8],12:[2,8],13:[2,8],15:[2,8],17:[2,8],19:[2,8],20:[2,8],21:[2,8],22:[2,8],24:[2,8],25:[2,8],26:[2,8],27:[2,8],28:[2,8],29:[2,8],36:[2,8],38:[2,8],49:[2,8]},{5:[2,40],8:[2,40],11:[2,40],12:[2,40],13:[2,40],15:[2,40],17:[2,40],19:[2,40],20:[2,40],21:[2,40],22:[2,40],24:[2,40],25:[2,40],26:[2,40],27:[2,40],28:[2,40],29:[2,40],31:[2,40],33:[2,40],36:[2,40],38:[2,40],40:[2,40],43:[2,40],44:[2,40],46:[2,40],48:[2,40],49:[2,40]},{5:[2,41],8:[2,41],11:[2,41],12:[2,41],13:[2,41],15:[2,41],17:[2,41],19:[2,41],20:[2,41],21:[2,41],22:[2,41],24:[2,41],25:[2,41],26:[2,41],27:[2,41],28:[2,41],29:[2,41],31:[2,41],33:[2,41],36:[2,41],38:[2,41],40:[2,41],43:[2,41],44:[2,41],46:[2,41],48:[2,41],49:[2,41]},{5:[2,42],8:[2,42],11:[2,42],12:[2,42],13:[2,42],15:[2,42],17:[2,42],19:[2,42],20:[2,42],21:[2,42],22:[2,42],24:[2,42],25:[2,42],26:[2,42],27:[2,42],28:[2,42],29:[2,42],31:[2,42],33:[2,42],36:[2,42],38:[2,42],40:[2,42],43:[2,42],44:[2,42],46:[2,42],48:[2,42],49:[2,42]},{5:[2,44],8:[2,44],11:[2,44],12:[2,44],13:[2,44],15:[2,44],17:[2,44],19:[2,44],20:[2,44],21:[2,44],22:[2,44],24:[2,44],25:[2,44],26:[2,44],27:[2,44],28:[2,44],29:[2,44],31:[2,44],33:[2,44],36:[2,44],38:[2,44],40:[2,44],43:[2,44],44:[2,44],46:[2,44],48:[2,44],49:[2,44]},{40:[2,36],46:[2,36],49:[2,36]}],
defaultActions: {31:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 31;
break;
case 1:return 33;
break;
case 2:return 'from';
break;
case 3:return 24;
break;
case 4:return 25;
break;
case 5:return 26;
break;
case 6:return 27;
break;
case 7:return 21;
break;
case 8:return 19;
break;
case 9:return 22;
break;
case 10:return 20;
break;
case 11:return 28;
break;
case 12:return 29;
break;
case 13:return 36;
break;
case 14:return 38;
break;
case 15:return 57;
break;
case 16:return 55;
break;
case 17:/* skip whitespace */
break;
case 18:return 51;
break;
case 19:return 50;
break;
case 20:return 50;
break;
case 21:return 42;
break;
case 22:return 53;
break;
case 23:return 43;
break;
case 24:return 11;
break;
case 25:return 12;
break;
case 26:return 13;
break;
case 27:return 40;
break;
case 28:return 8;
break;
case 29:return 28;
break;
case 30:return 29;
break;
case 31:return 25;
break;
case 32:return 24;
break;
case 33:return 27;
break;
case 34:return 26;
break;
case 35:return 21;
break;
case 36:return 22;
break;
case 37:return 20;
break;
case 38:return 19;
break;
case 39:return 36;
break;
case 40:return 38;
break;
case 41:return 15;
break;
case 42:return 17;
break;
case 43:return 48;
break;
case 44:return 46;
break;
case 45:return 44;
break;
case 46:return 49;
break;
case 47:return 9;
break;
case 48:return 5;
break;
}
},
rules: [/^(?:\s+in\b)/,/^(?:\s+notIn\b)/,/^(?:\s+from\b)/,/^(?:\s+(eq|EQ)\b)/,/^(?:\s+(seq|SEQ)\b)/,/^(?:\s+(neq|NEQ)\b)/,/^(?:\s+(sneq|SNEQ)\b)/,/^(?:\s+(lte|LTE)\b)/,/^(?:\s+(lt|LT)\b)/,/^(?:\s+(gte|GTE)\b)/,/^(?:\s+(gt|GT)\b)/,/^(?:\s+(like|LIKE)\b)/,/^(?:\s+(notLike|NOT_LIKE)\b)/,/^(?:\s+(and|AND)\b)/,/^(?:\s+(or|OR)\b)/,/^(?:\s+null\b)/,/^(?:\s+(true|false)\b)/,/^(?:\s+)/,/^(?:-?[0-9]+(?:\.[0-9]+)?\b)/,/^(?:'[^']*')/,/^(?:"[^"]*")/,/^(?:([a-zA-Z_$][0-9a-zA-Z_$]*))/,/^(?:^\/((?![\s=])[^[\/\n\\]*(?:(?:\\[\s\S]|\[[^\]\n\\]*(?:\\[\s\S][^\]\n\\]*)*])[^[\/\n\\]*)*\/[imgy]{0,4})(?!\w))/,/^(?:\.)/,/^(?:\*)/,/^(?:\/)/,/^(?:\%)/,/^(?:,)/,/^(?:-)/,/^(?:=~)/,/^(?:!=~)/,/^(?:===)/,/^(?:==)/,/^(?:!==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\+)/,/^(?:\^)/,/^(?:\()/,/^(?:\])/,/^(?:\[)/,/^(?:\))/,/^(?:!)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}